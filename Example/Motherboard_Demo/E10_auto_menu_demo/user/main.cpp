/*********************************************************************************************************************
* LS2K0300 Opensource Library (LS2K0300 Open Source Library) is a third-party open source library based on official SDK interface
* Copyright (c) 2022 SEEKFREE ?????
*
* This file is part of LS2K0300 Open Source Library
*
* LS2K0300 Open Source Library is free software
* You can redistribute it and/or modify it under the terms of the GNU General Public License
* published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version
*
* This open source library is released in the hope that it will be useful, but without any warranty
* not even implied merchantability or fitness for a particular purpose
* For more details, please refer to GPL
*
* You should have received a copy of the GPL along with this open source library
* If not, please see <https://www.gnu.org/licenses/>
*
* Additional notes:
* This open source library uses GPL3.0 open source license agreement The above permission statement is a translated version
* The English version of the license statement is in the libraries/doc folder under GPL3_permission_statement.txt
* A copy of the license is in the libraries folder LICENSE file
* Welcome everyone to use and spread this program, but when modifying the content, you must retain the copyright statement of Seekfree Technology (i.e. this statement)
*
* File name          main
* Company name       Chengdu Seekfree Technology Co., Ltd.
* Applicable platform LS2K0300
* Shop link          https://seekfree.taobao.com/
*
* Modification record
* Date              Author           Remarks
* 2025-10-07        Kilo Code        Auto menu system
*********************************************************************************************************************/

#include "zf_common_headfile.h"
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>

// *************************** Hardware connection description ***************************
// ??????????????54pin?????????????????????????????????????????????????????????????
// ??????????????54pin?????????????????????????????????????????????????????????????
// ??????????????54pin?????????????????????????????????????????????????????????????
// ?????????????????????????????????
// 
// ????????
// KEY_0         ?? seekfree_smart_cat_pai_99 ???????????? zf_driver_gpio_key_0 ??? GPIO13
// KEY_1         ?? seekfree_smart_cat_pai_99 ???????????? zf_driver_gpio_key_1 ??? GPIO14
// KEY_2         ?? seekfree_smart_cat_pai_99 ???????????? zf_driver_gpio_key_2 ??? GPIO15
// KEY_3         ?? seekfree_smart_cat_pai_99 ???????????? zf_driver_gpio_key_3 ??? GPIO16
// SWITCH_0      ?? seekfree_smart_cat_pai_99 ???????????? zf_driver_gpio_switch_0 ??? GPIO20
// SWITCH_1      ?? seekfree_smart_cat_pai_99 ???????????? zf_driver_gpio_switch_1 ??? GPIO21
// 
// IPS200??????????
// SCL           ?? seekfree_smart_cat_pai_99 ???????????? st7789v ??? GPIO60
// SDA           ?? seekfree_smart_cat_pai_99 ???????????? st7789v ??? GPIO62
// RST           ?? seekfree_smart_cat_pai_99 ???????????? st7789v ??? GPIO74
// DC            ?? seekfree_smart_cat_pai_99 ???????????? st7789v ??? GPIO26
// CS            ?? seekfree_smart_cat_pai_99 ???????????? st7789v ??? GPIO63
// BL            ?? seekfree_smart_cat_pai_99 ???????????? st7789v ??? GPIO75
// GND           ????????? GND
// 3V3           ???? 3V3 ???
// 
// *************************** Test description ***************************
// 1.???????????????? ?????????
// 2.IPS200????????????????????????? ??????????? ??????
// 3.????????????????????????????
// 4.???KEY_0 KEY_1 KEY_2 KEY_3???????????????
// 5.?????????????????????????????
//
// **************************** Code area ****************************

// ???????????
#define KEY_0       "/dev/zf_driver_gpio_key_0"
#define KEY_1       "/dev/zf_driver_gpio_key_1"
#define KEY_2       "/dev/zf_driver_gpio_key_2"
#define KEY_3       "/dev/zf_driver_gpio_key_3"

// ?????????
#define MENU_ITEMS  4
const char* menu_texts[MENU_ITEMS] = {
    "1. project",
    "2. Single Motor Control", 
    "3. Servo Control",
    "4. Encoder Test"
};

// ????????????
const char* project_paths[MENU_ITEMS] = {
    "/home/root/project",
    "/home/root/E01_01_button_switch_buzzer_demo",
    "/home/root/E02_04_drv8701e_double_motor_control_demo", 
    "/home/root/E06_04_ips200_display_demo"
};

// ????????????
int current_menu_item = 0;
bool menu_initialized = false;

// ??????????
uint8_t key_0_prev = 1;
uint8_t key_1_prev = 1;
uint8_t key_2_prev = 1;
uint8_t key_3_prev = 1;

// ???????????
#define DEBOUNCE_TIME 300

// ????????
void run_selected_project(void);

// ??????
void display_menu() {
    ips200_clear();
    ips200_full(RGB565_WHITE);
    
    // ???????
    ips200_show_string(0, 16*3, "Select Program:");
    
    // ????????
    for(int i = 0; i < MENU_ITEMS; i++) {
        if(i == current_menu_item) {
            // ?????????????????????????">"????
            char selected_text[32];
            sprintf(selected_text, "> %s", menu_texts[i]);
            ips200_show_string(0, 16*(5+i), selected_text);
        } else {
            // ???????????????????
            ips200_show_string(0, 16*(5+i), menu_texts[i]);
        }
    }
    

    
    // ??????????
    ips200_show_string(0, 16*10, "KEY_3:Up KEY_2:Down");
    ips200_show_string(0, 16*11, "KEY_1:Enter KEY_0:Cancel");
    ips200_show_string(0, 16*12, "KEY_3+KEY_2:Exit Menu");
}

// ??????
void check_keys() {
    uint8_t key_0_curr = gpio_get_level(KEY_0);
    uint8_t key_1_curr = gpio_get_level(KEY_1);
    uint8_t key_2_curr = gpio_get_level(KEY_2);
    uint8_t key_3_curr = gpio_get_level(KEY_3);
    
    // ????????????????
    if(key_3_curr == 0 && key_3_prev == 1) {
        // KEY_3???????????????????
        current_menu_item--;
        if(current_menu_item < 0) {
            current_menu_item = MENU_ITEMS - 1;
        }
        display_menu();
        system_delay_ms(DEBOUNCE_TIME); // ????
    }
    
    if(key_2_curr == 0 && key_2_prev == 1) {
        // KEY_2???????????????????
        current_menu_item++;
        if(current_menu_item >= MENU_ITEMS) {
            current_menu_item = 0;
        }
        display_menu();
        system_delay_ms(DEBOUNCE_TIME); // ????
    }
    
    if(key_1_curr == 0 && key_1_prev == 1) {
        // KEY_1????????????????????
        run_selected_project();
        system_delay_ms(DEBOUNCE_TIME); // ????
    }
    
    if(key_0_curr == 0 && key_0_prev == 1) {
        // KEY_0??????????????????
        current_menu_item = 0;
        display_menu();
        system_delay_ms(DEBOUNCE_TIME); // ????
    }
    
    // ??????????
    key_0_prev = key_0_curr;
    key_1_prev = key_1_curr;
    key_2_prev = key_2_curr;
    key_3_prev = key_3_curr;
}

// ??????До????
void run_selected_project() {
    ips200_clear();
    ips200_full(RGB565_WHITE);
    
    const char* project_cmd = NULL;
    const char* project_name = NULL;
    
    switch(current_menu_item) {
        case 0:
            project_name = "project";
            project_cmd = "cd /home/root/project && ./project";
            break;
            
        case 1:
            project_name = "Single Motor Control";
            project_cmd = "cd /home/root/E01_01_button_switch_buzzer_demo && ./E01_01_button_switch_buzzer_demo";
            break;
            
        case 2:
            project_name = "Motor Control";
            project_cmd = "cd /home/root/E02_04_drv8701e_double_motor_control_demo && ./E02_04_drv8701e_double_motor_control_demo";
            break;
            
        case 3:
            project_name = "Encoder Test";
            project_cmd = "cd /home/root/E06_04_ips200_display_demo && ./E06_04_ips200_display_demo";
            break;
    }
    
    // ??????????
    char msg[64];
    sprintf(msg, "Starting %s...", project_name);
    ips200_show_string(0, 16*3, msg);
    ips200_show_string(0, 16*4, "Press KEY_0 to return to menu");
    ips200_show_string(0, 16*5, "Press KEY_3+KEY_2 to exit menu");
    ips200_show_string(0, 16*6, "Press Ctrl+C to stop program");
    system_delay_ms(1000);
    
    // ???????????????????
    ips200_clear();
    ips200_full(RGB565_WHITE);
    ips200_show_string(0, 16*2, project_name);
    ips200_show_string(0, 16*3, "Running...");
    ips200_show_string(0, 16*4, "Use Ctrl+C to stop");
    ips200_show_string(0, 16*5, "Press KEY_0 to return to menu");
    ips200_show_string(0, 16*6, "Press KEY_3+KEY_2 to exit menu");
    
    printf("Starting %s: %s\n", project_name, project_cmd);
    
    // ???fork??exec?????????????????????????????
    pid_t pid = fork();
    if (pid == 0) {
        // ?????
        execl("/bin/sh", "sh", "-c", project_cmd, NULL);
        // ???exec????????????
        exit(1);
    } else if (pid > 0) {
        // ??????????????
        int status;
        waitpid(pid, &status, 0); // ???????????
        printf("%s exited with status: %d\n", project_name, status);
    } else {
        // fork???
        printf("Failed to fork process\n");
    }
    
    // ????????????
    display_menu();
}

// ??????????
void sigint_handler(int signum) {
    printf("Received Ctrl+C, program will exit\n");
    exit(0);
}

int main(int, char**) {
    // ?????IPS200???
    ips200_init("/dev/fb0");
    
    // ???????????????????????gpio_init?????
    
    // ?????????????
    signal(SIGINT, sigint_handler);
    
    // ??????
    display_menu();
    menu_initialized = true;
    
    printf("Auto Menu System Started\n");
    printf("Use KEY_3/KEY_2 to select, KEY_1 to enter, KEY_0 to cancel\n");
    
    while(1) {
        // ??????
        check_keys();
        
        // ???CPU???????
        system_delay_ms(50);
    }
}

// **************************** Code area ****************************

// *************************** Example common problems ***************************
// ??????????????????????????????
// 
// ????1?????????????xxx???
//      ?????????????????????????????????????????xxx????????
//      ?????????????????????????????????????????xxx????????
//      ?????????????????????????????????????????xxx????????
//
// ????2??????????
//      ?????????????????????????????????????????????????????
//      ????????????????????????????? ????????????????
//      ??????????????????? ????????????
//      ?????????????? ?????????????????????? ??????????
//      ????????????????????GPIO????????????IO??????GPIO?????? ??????????
//
// ????3????????????
//      ??????????????????????GPIO????
//      ????????????????? ?????????????????????????????
//      ????????????????????????????????????????????????
//
// ????4?????????????
//      ??????????????????????????
//      ???????????????????
//      ????????????????????
//      ?????????????????????????
// Test update
